
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qinlsswojrcuvdudlpvf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFpbmxzc3dvanJjdXZkdWRscHZmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4ODI1MTAsImV4cCI6MjA1OTQ1ODUxMH0.PvgmJHdjEbwzzg3Je5nYoLb2uZQeWD2qit6iMJ7UFzM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Get the current logged in user
 * @returns The current user or null if not logged in
 */
export const logCurrentUser = async () => {
  try {
    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('Error getting session:', sessionError);
      return null;
    }
    
    if (!sessionData.session) {
      console.log('No active session found');
      return null;
    }
    
    const { data: userData, error: userError } = await supabase.auth.getUser();
    
    if (userError) {
      console.error('Error getting user:', userError);
      return null;
    }
    
    console.log('Current user:', userData.user);
    return userData.user;
  } catch (error) {
    console.error('Error in logCurrentUser:', error);
    return null;
  }
};

/**
 * Add multiple products to the public products collection
 * @param products Array of products to add
 * @param userId User ID for the products
 * @returns The inserted products or null if there was an error
 */
export const addMultiplePublicProducts = async (products, userId) => {
  try {
    if (!Array.isArray(products) || products.length === 0) {
      console.error('No products provided or invalid products array');
      return null;
    }
    
    if (!userId) {
      console.error('No user ID provided');
      return null;
    }
    
    const productsWithUserData = products.map(product => ({
      ...product,
      user_id: userId,
      is_public: true,
      image: product.image || '/placeholder.svg',
      stock: product.stock || 0,
      purchase_price: product.purchase_price || 0,
    }));
    
    const { data, error } = await supabase
      .from('products')
      .insert(productsWithUserData)
      .select();
      
    if (error) {
      console.error('Error adding products:', error);
      return null;
    }
    
    console.log(`Successfully added ${data.length} products`);
    return data;
  } catch (error) {
    console.error('Error in addMultiplePublicProducts:', error);
    return null;
  }
};

/**
 * Get sales report data for a specific date range
 * @param userId User ID to get sales for
 * @param startDate Start date for the report
 * @param endDate End date for the report
 * @returns Array of sales or null if there was an error
 */
export const getSalesReportData = async (userId, startDate, endDate) => {
  try {
    if (!userId) {
      console.error('No user ID provided for sales report data');
      return null;
    }
    
    // Convert dates to ISO strings if they're Date objects
    const formattedStartDate = startDate instanceof Date 
      ? startDate.toISOString() 
      : startDate;
    
    const formattedEndDate = endDate instanceof Date 
      ? endDate.toISOString() 
      : endDate;
    
    console.log(`Getting sales report data for user ${userId} from ${formattedStartDate} to ${formattedEndDate}`);
    
    const { data, error } = await supabase
      .from('sales')
      .select('*')
      .eq('user_id', userId)
      .gte('date', formattedStartDate)
      .lte('date', formattedEndDate)
      .order('date', { ascending: false });
      
    if (error) {
      console.error('Error getting sales report data:', error);
      return null;
    }
    
    console.log(`Retrieved ${data.length} sales records`);
    return data;
  } catch (error) {
    console.error('Error in getSalesReportData:', error);
    return null;
  }
};

/**
 * Generate a financial report based on sales data
 * @param userId User ID to generate report for
 * @param days Number of days to include in the report
 * @returns The generated report or null if there was an error
 */
export const generateSalesReport = async (userId, days = 30) => {
  try {
    if (!userId) {
      console.error('No user ID provided for sales report generation');
      return null;
    }
    
    console.log(`Generating sales report for user ${userId} for the last ${days} days`);
    
    // Calculate dates for the period
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);
    
    // Get sales data for the period
    const salesData = await getSalesReportData(userId, startDate, endDate);
    
    if (!salesData || salesData.length === 0) {
      console.log('No sales data available for the period');
      return null;
    }
    
    // Calculate total revenue
    const totalRevenue = salesData.reduce((sum, sale) => sum + parseFloat(sale.total), 0);
    
    // Calculate total cost (if available in the data)
    let totalCost = 0;
    let totalProfit = 0;
    
    // Try to calculate cost if possible from the items data
    salesData.forEach(sale => {
      if (sale.items && sale.items.products) {
        sale.items.products.forEach(item => {
          const purchasePrice = item.purchase_price || 0;
          const quantity = item.quantity || 1;
          totalCost += purchasePrice * quantity;
        });
      }
    });
    
    // If we couldn't calculate cost, estimate it as 60% of revenue
    if (totalCost === 0) {
      totalCost = totalRevenue * 0.6;
    }
    
    totalProfit = totalRevenue - totalCost;
    
    // Create the report
    const reportData = {
      title: `Relatório Financeiro - Últimos ${days} dias`,
      description: `Relatório financeiro automático para o período de ${startDate.toLocaleDateString()} até ${endDate.toLocaleDateString()}`,
      report_type: 'auto_generated',
      period_start: startDate.toISOString().split('T')[0],
      period_end: endDate.toISOString().split('T')[0],
      total_revenue: totalRevenue,
      total_cost: totalCost,
      total_profit: totalProfit,
      user_id: userId,
      metrics: {
        total_sales: salesData.length,
        average_ticket: totalRevenue / salesData.length,
        profit_margin: (totalProfit / totalRevenue) * 100,
      }
    };
    
    // Save the report to the database
    const { data: savedReport, error } = await supabase
      .from('financial_reports')
      .insert(reportData)
      .select()
      .single();
      
    if (error) {
      console.error('Error saving financial report:', error);
      return null;
    }
    
    console.log('Financial report generated and saved:', savedReport);
    return savedReport;
  } catch (error) {
    console.error('Error in generateSalesReport:', error);
    return null;
  }
};
