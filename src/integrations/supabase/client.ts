
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qinlsswojrcuvdudlpvf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFpbmxzc3dvanJjdXZkdWRscHZmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4ODI1MTAsImV4cCI6MjA1OTQ1ODUxMH0.PvgmJHdjEbwzzg3Je5nYoLb2uZQeWD2qit6iMJ7UFzM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Products image functions
export const getProductImageUrl = (imagePath: string) => {
  if (!imagePath || imagePath === '/placeholder.svg') {
    return '/placeholder.svg';
  }
  
  // Check if it's a full URL already (for testing/fallback scenarios)
  if (imagePath.startsWith('http')) {
    return imagePath;
  }
  
  // If path starts with 'products/', assume it's a storage path
  if (imagePath.startsWith('products/')) {
    // Get public URL from storage
    const { data } = supabase.storage.from('products').getPublicUrl(imagePath);
    return data?.publicUrl || '/placeholder.svg';
  }
  
  // Return the path as-is if it doesn't match any of the above conditions
  return imagePath;
};

// User information functions
export const logCurrentUser = async () => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      console.log("Current user:", user.id, user.email);
      return user;
    }
    console.log("No user logged in");
    return null;
  } catch (error) {
    console.error("Error getting current user:", error);
    return null;
  }
};

// Product import functions
export const addMultiplePublicProducts = async (products: any[], userId: string) => {
  try {
    const productsWithUserId = products.map(product => ({
      ...product,
      user_id: userId,
      is_public: true,
      stock: product.stock || 10
    }));
    
    const { data, error } = await supabase
      .from('products')
      .insert(productsWithUserId)
      .select();
      
    if (error) throw error;
    
    console.log(`Successfully added ${data.length} public products`);
    return data;
  } catch (error) {
    console.error("Error adding public products:", error);
    throw error;
  }
};
