// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qinlsswojrcuvdudlpvf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFpbmxzc3dvanJjdXZkdWRscHZmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4ODI1MTAsImV4cCI6MjA1OTQ1ODUxMH0.PvgmJHdjEbwzzg3Je5nYoLb2uZQeWD2qit6iMJ7UFzM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper to log current user - used for debugging
export const logCurrentUser = async () => {
  const { data: { user } } = await supabase.auth.getUser();
  console.log("Current authenticated user:", user);
  return user;
};

// Function to get the URL for a product image
export const getProductImageUrl = (imagePath: string) => {
  if (!imagePath || imagePath === '/placeholder.svg') {
    return '/placeholder.svg';
  }

  // If it's already a complete URL, return it
  if (imagePath.startsWith('http')) {
    return imagePath;
  }

  // If it's a path in the storage, get the URL
  if (imagePath.startsWith('products/')) {
    return `${SUPABASE_URL}/storage/v1/object/public/products/${imagePath.replace('products/', '')}`;
  }

  return imagePath;
};

// Function to add multiple public products
export const addMultiplePublicProducts = async (products: any[], userId: string) => {
  if (!products || products.length === 0) {
    throw new Error("No products provided to import");
  }

  console.log(`Importing ${products.length} products for user ${userId}`);

  const productsWithUserIdAndPublic = products.map(product => ({
    ...product,
    user_id: userId,
    is_public: true
  }));

  const { data, error } = await supabase
    .from('products')
    .insert(productsWithUserIdAndPublic);

  if (error) {
    console.error("Error importing products:", error);
    throw error;
  }

  console.log("Products imported successfully:", data);
  return data;
};

// Function to get sales report data
export const getSalesReportData = async (userId: string, startDate: Date, endDate: Date) => {
  console.log(`Fetching sales report data for user ${userId} from ${startDate.toISOString()} to ${endDate.toISOString()}`);
  
  try {
    const { data, error } = await supabase
      .from('sales')
      .select('*')
      .eq('user_id', userId)
      .gte('date', startDate.toISOString())
      .lte('date', endDate.toISOString())
      .order('date', { ascending: false });

    if (error) {
      console.error("Error fetching sales report data:", error);
      throw error;
    }

    console.log(`Retrieved ${data?.length || 0} sales records`);
    return data;
  } catch (e) {
    console.error("Exception in getSalesReportData:", e);
    throw e;
  }
};

// Function to generate sales report
export const generateSalesReport = async (userId: string, days: number = 30) => {
  console.log(`Generating sales report for user ${userId} for the last ${days} days`);
  
  const endDate = new Date();
  const startDate = new Date();
  startDate.setDate(startDate.getDate() - days);
  
  // Get sales data
  const { data: sales, error: salesError } = await supabase
    .from('sales')
    .select('*')
    .eq('user_id', userId)
    .gte('date', startDate.toISOString())
    .lte('date', endDate.toISOString());

  if (salesError) {
    console.error("Error fetching sales data for report:", salesError);
    throw salesError;
  }

  if (!sales || sales.length === 0) {
    console.log("No sales data found for the period");
    return null;
  }

  // Calculate basic metrics
  const totalRevenue = sales.reduce((acc, sale) => acc + (sale.total || 0), 0);
  const totalCost = 0; // Would need additional data to calculate this accurately
  const totalProfit = totalRevenue - totalCost;

  // Create report
  const report = {
    title: `Sales Report (${days} days)`,
    description: `Sales performance report for the last ${days} days`,
    report_type: 'sales',
    period_start: startDate.toISOString().split('T')[0],
    period_end: endDate.toISOString().split('T')[0],
    total_revenue: totalRevenue,
    total_cost: totalCost,
    total_profit: totalProfit,
    user_id: userId,
    metrics: {
      total_sales: sales.length,
      average_sale: sales.length > 0 ? totalRevenue / sales.length : 0
    }
  };

  // Save report to database
  const { data: reportData, error: reportError } = await supabase
    .from('financial_reports')
    .insert(report)
    .select()
    .single();

  if (reportError) {
    console.error("Error creating financial report:", reportError);
    throw reportError;
  }

  console.log("Financial report generated successfully:", reportData);
  return reportData;
};
