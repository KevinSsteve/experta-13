
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qinlsswojrcuvdudlpvf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFpbmxzc3dvanJjdXZkdWRscHZmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4ODI1MTAsImV4cCI6MjA1OTQ1ODUxMH0.PvgmJHdjEbwzzg3Je5nYoLb2uZQeWD2qit6iMJ7UFzM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Gets the image URL for a product
 */
export const getProductImageUrl = (imagePath: string): string => {
  if (!imagePath || imagePath === '/placeholder.svg') {
    return '/placeholder.svg';
  }
  
  // If it's already a full URL, return it as is
  if (imagePath.startsWith('http')) {
    return imagePath;
  }
  
  // If it's a storage path, construct the URL
  if (imagePath.startsWith('products/')) {
    const publicUrl = `${SUPABASE_URL}/storage/v1/object/public/products/${imagePath.replace('products/', '')}`;
    return publicUrl;
  }
  
  return imagePath;
};

/**
 * Gets sales report data for a specific user and date range
 */
export const getSalesReportData = async (userId: string, fromDate: Date, toDate: Date) => {
  console.log('Fetching sales report data for user:', userId);
  console.log('Date range:', fromDate, 'to', toDate);
  
  try {
    const { data, error } = await supabase
      .from('sales')
      .select('*')
      .eq('user_id', userId)
      .gte('date', fromDate.toISOString())
      .lte('date', toDate.toISOString())
      .order('date', { ascending: false });
    
    if (error) {
      console.error('Error fetching sales report data:', error);
      throw error;
    }
    
    console.log('Fetched sales data:', data?.length || 0, 'records');
    return data || [];
  } catch (error) {
    console.error('Error in getSalesReportData:', error);
    throw error;
  }
};

/**
 * Generates a sales report for a specific user
 */
export const generateSalesReport = async (userId: string, days = 30) => {
  console.log('Generating sales report for user:', userId);
  console.log('Period:', days, 'days');
  
  try {
    const endDate = new Date();
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);
    
    // Fetch sales for the period
    const { data: sales, error: salesError } = await supabase
      .from('sales')
      .select('*')
      .eq('user_id', userId)
      .gte('date', startDate.toISOString())
      .lte('date', endDate.toISOString());
    
    if (salesError) {
      console.error('Error fetching sales for report:', salesError);
      throw salesError;
    }
    
    if (!sales || sales.length === 0) {
      console.log('No sales found for the period');
      return null;
    }
    
    console.log('Fetched sales for report:', sales.length, 'records');
    
    // Calculate totals
    const totalRevenue = sales.reduce((sum, sale) => sum + sale.total, 0);
    const totalCost = 0; // Would require product purchase prices for accurate calculation
    const totalProfit = totalRevenue - totalCost;
    
    // Generate report ID
    const reportId = crypto.randomUUID();
    
    // Create report in the database
    const { data: reportData, error: reportError } = await supabase
      .from('financial_reports')
      .insert({
        id: reportId,
        user_id: userId,
        title: `Relatório de Vendas - ${days} dias`,
        description: `Relatório automático de vendas dos últimos ${days} dias`,
        report_type: 'sales',
        period_start: startDate.toISOString(),
        period_end: endDate.toISOString(),
        total_revenue: totalRevenue,
        total_cost: totalCost,
        total_profit: totalProfit,
        metrics: {
          sales_count: sales.length,
          average_sale: totalRevenue / sales.length,
          period_days: days
        }
      })
      .select()
      .single();
    
    if (reportError) {
      console.error('Error creating financial report:', reportError);
      throw reportError;
    }
    
    console.log('Created financial report:', reportData);
    return reportData;
  } catch (error) {
    console.error('Error in generateSalesReport:', error);
    throw error;
  }
};

/**
 * Logs the current user to console (for debugging)
 */
export const logCurrentUser = async () => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    const user = session?.user;
    
    if (user) {
      console.log('Current user:', user);
      return user;
    } else {
      console.log('No authenticated user');
      return null;
    }
  } catch (error) {
    console.error('Error logging current user:', error);
    return null;
  }
};

/**
 * Adds multiple products to the public product database
 */
export const addMultiplePublicProducts = async (products: any[], userId: string) => {
  console.log(`Adding ${products.length} public products`);
  
  if (!products || products.length === 0) {
    console.log('No products provided');
    return [];
  }
  
  try {
    // Map the products to include user_id and is_public
    const productsToInsert = products.map(product => ({
      ...product,
      user_id: userId,
      is_public: true,
      stock: product.stock || 10,
      image: product.image || '/placeholder.svg',
      code: product.code || null,
      description: product.description || null
    }));
    
    const { data, error } = await supabase
      .from('products')
      .insert(productsToInsert)
      .select();
    
    if (error) {
      console.error('Error adding public products:', error);
      throw error;
    }
    
    console.log(`Successfully added ${data.length} public products`);
    return data;
  } catch (error) {
    console.error('Error in addMultiplePublicProducts:', error);
    throw error;
  }
};
