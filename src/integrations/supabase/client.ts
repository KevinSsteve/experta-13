
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qinlsswojrcuvdudlpvf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFpbmxzc3dvanJjdXZkdWRscHZmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4ODI1MTAsImV4cCI6MjA1OTQ1ODUxMH0.PvgmJHdjEbwzzg3Je5nYoLb2uZQeWD2qit6iMJ7UFzM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: localStorage
  }
});

// Helper for debugging - logs the current user
export const logCurrentUser = async () => {
  const { data: { user } } = await supabase.auth.getUser();
  console.log("Current user:", user);
  return user;
};

// Busca produtos públicos para sugestões
export const getPublicProducts = async (limit = 20) => {
  try {
    const { data, error } = await supabase
      .from('products')
      .select('*')
      .eq('is_public', true)
      .order('name')
      .limit(limit);
    
    if (error) {
      console.error("Erro ao buscar produtos públicos:", error);
      throw error;
    }
    
    return data;
  } catch (error) {
    console.error("Erro ao buscar produtos públicos:", error);
    return [];
  }
};

// Add a helper function to add a product to user's inventory
export const addProductToInventory = async (product: any, userId: string) => {
  if (!userId) {
    throw new Error("User ID is required to add a product to inventory");
  }
  
  const newProduct = {
    ...product,
    user_id: userId,
    is_public: false,
    stock: product.stock || 10
  };
  
  const { data, error } = await supabase
    .from('products')
    .insert([newProduct])
    .select();
    
  if (error) throw error;
  return data;
};

// Add multiple products to the database as public products
export const addMultiplePublicProducts = async (products: any[], userId: string) => {
  if (!userId) {
    throw new Error("User ID is required to add public products");
  }
  
  // Format products for insertion
  const formattedProducts = products.map(product => ({
    name: product.name,
    price: product.price,
    category: product.category || "Outros",
    stock: product.stock || 50,
    description: product.description || null,
    code: product.code || null,
    image: product.image || "/placeholder.svg",
    user_id: userId,
    is_public: true
  }));
  
  // Insert products in chunks to avoid hitting limits
  const chunkSize = 20;
  const results = [];
  
  for (let i = 0; i < formattedProducts.length; i += chunkSize) {
    const chunk = formattedProducts.slice(i, i + chunkSize);
    const { data, error } = await supabase
      .from('products')
      .insert(chunk);
      
    if (error) {
      console.error(`Error inserting chunk ${i / chunkSize + 1}:`, error);
      throw error;
    }
    
    console.log(`Successfully added chunk ${i / chunkSize + 1} of ${Math.ceil(formattedProducts.length / chunkSize)}`);
    results.push(data);
  }
  
  return results;
};

// Helper to get the public URL for an image in the products bucket
export const getProductImageUrl = (path: string) => {
  if (!path || path === "/placeholder.svg") {
    return "/placeholder.svg";
  }
  
  // If the path is already a full URL, return it
  if (path.startsWith("http")) {
    return path;
  }
  
  // If path starts with a slash and is not just "/", remove the leading slash
  const cleanPath = path.startsWith("/") && path !== "/" ? path.substring(1) : path;
  
  // Get public URL from storage
  try {
    console.log("Getting public URL for image path:", cleanPath);
    const { data } = supabase.storage
      .from("products")
      .getPublicUrl(cleanPath);
    
    console.log("Generated public URL:", data.publicUrl);
    return data.publicUrl;
  } catch (error) {
    console.error("Error getting public URL for image:", error);
    return "/placeholder.svg";
  }
};

// Função de diagnóstico para verificar permissões do usuário
export const testPermissions = async () => {
  try {
    // Verificar autenticação atual
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      console.warn("Nenhum usuário autenticado encontrado");
      return {
        success: false,
        error: "Nenhum usuário autenticado encontrado",
        authStatus: "não autenticado"
      };
    }
    
    console.log("Testando permissões para usuário:", user.id);
    
    // Testa leitura na tabela de produtos
    const { data: products, error: productsError } = await supabase
      .from('products')
      .select('*')
      .eq('user_id', user.id)
      .limit(1);
    
    // Testa leitura na tabela de vendas
    const { data: sales, error: salesError } = await supabase
      .from('sales')
      .select('*')
      .eq('user_id', user.id)
      .limit(1);
    
    // Testa perfil do usuário atual
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', user.id)
      .single();
    
    // Testa acesso ao storage
    const { data: buckets, error: bucketsError } = await supabase
      .storage
      .listBuckets();
    
    return {
      auth: {
        success: !!user,
        userId: user.id,
        email: user.email
      },
      products: {
        success: !productsError,
        data: products,
        error: productsError
      },
      sales: {
        success: !salesError,
        data: sales,
        error: salesError
      },
      profile: {
        success: !profileError,
        data: profile,
        error: profileError
      },
      storage: {
        success: !bucketsError,
        data: buckets,
        error: bucketsError
      }
    };
  } catch (error) {
    console.error("Erro ao testar permissões:", error);
    return {
      success: false,
      error
    };
  }
};

// Verificar se as políticas de RLS estão funcionando corretamente
export const verifyRlsPolicies = async () => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      console.log("Nenhum usuário autenticado encontrado para verificar RLS");
      return {
        success: false,
        message: "Nenhum usuário autenticado"
      };
    }
    
    // Teste para verificar se o usuário pode acessar seus próprios produtos
    const { data: userProducts, error: userProductsError } = await supabase
      .from('products')
      .select('id, name, user_id')
      .eq('user_id', user.id)
      .limit(5);
    
    // Teste para verificar se o usuário pode acessar suas próprias vendas
    const { data: userSales, error: userSalesError } = await supabase
      .from('sales')
      .select('id, date, total, user_id')
      .eq('user_id', user.id)
      .limit(5);
    
    return {
      success: true,
      userId: user.id,
      products: {
        success: !userProductsError,
        count: userProducts?.length || 0,
        sample: userProducts?.slice(0, 2) || [],
        error: userProductsError
      },
      sales: {
        success: !userSalesError,
        count: userSales?.length || 0,
        sample: userSales?.slice(0, 2) || [],
        error: userSalesError
      }
    };
  } catch (error) {
    console.error("Erro ao verificar políticas RLS:", error);
    return {
      success: false,
      error
    };
  }
};
